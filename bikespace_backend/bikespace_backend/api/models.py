# MIT License
# Copyright 2017, Code 4 Canada
# written by and for the bicycle parking project, a joint project of 
# Code 4 Canada, Civic Tech Toronto, Cycle Toronto, and the 
# City of Toronto
#
# bikespace_backend/bikespace_backend/api/models.py
# 
# Written 2017 07 21
#
# Modified 2017 10 18
# Purpose support for multiple databases and the geocoding lookup
#
# Modified 2017 11 05 
# Purpose rename table 'Pin' to 'Area'
#
# Modified 2017 11 24
# Purpose  Incorporate de-duped intersection table
#
# Modified 2018 02 23
# Purpose  separate picture file reference into separate table
#
# Modified 2018 05 03 
# Purpose  added beta user comment table
#
# Modified 2018 08 30
# Purpose  added edit table and status to approval table; removed string functions from models
#
# Modified 2018 08 30
# Purpose  updated definitions from djang to flask/SQLAlchemy
#

from sqlalchemy.sql import func
import datetime
from sqlalchemy.dialects.postgresql import JSON
from bikespace_backend import db

class SurveyAnswer(db.Model):
    """Contains the information directly input by the user or generated by user
    actions such as taking a picture. The information in this table is linked
    and tied to the geographical area information about the request by the
    Event table/class."""

    __tablename__ = 'bikeparking_surveyanswer'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    latitude = db.Column(db.Float, nullable=False)
    longitude = db.Column(db.Float, nullable=False)
    survey = db.Column(JSON, nullable=False)
    event = db.relationship ('Event', backref='bikeparking_surveyanswer', uselist=False, lazy=True)
    pictures = db.relationship ('Picture', backref='bikeparking_surveyanswer', lazy=True)

    def __init__(self, latitude, longitude, survey):
        self.latitude = latitude
        self.longitude = longitude
        self.survey = survey

class Picture (db.Model) :  
    """Contains the definition of a photograph uploaded by the user of the 
       selected parking problem."""

    __tablename__ = 'bikeparking_picture'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    photo_uri = db.Column (db.String(256), default=None, nullable=True)
    photo_desc = db.Column (db.String(256), default=None, nullable=True)
    answer = db.Column (db.Integer, db.ForeignKey('bikeparking_surveyanswer.id'), nullable=False)

class Event(db.Model) :
    """The event table ties the request together. Request information falls into
    two categories: information generated from the user, either as input 
    or based on user actions; this information resides in the SurveyAnswer table,
    linked as the answer field in the Event table/class. Information from the
    second category, information derived from the transaction itself and the 
    timestamp of the request, resides in the Event table."""

    __tablename__ = 'bikeparking_event'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    sourceIP = db.Column (db.String (15), default=None, nullable=True)
    answer = db.Column (db.Integer, db.ForeignKey('bikeparking_surveyanswer.id'), nullable=False)
    timeOf = db.Column (db.DateTime, default=datetime.datetime.utcnow)

class Approval (db.Model) :
    """The entries in this table link to events approved for display or release 
    to the general public by a moderator."""

    __tablename__ = 'bikeparking_approval'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    timeOfApproval = db.Column (db.DateTime, default=datetime.datetime.utcnow)
    moderatorId = db.Column (db.String (64), nullable = True)
    status = db.Column (db.String (10), default = 'OK')
    approved = db.Column (db.Integer, db.ForeignKey ('bikeparking_event.id'), nullable = False)

class Edit (db.Model) :
    """Records the edits to the records made by a moderator or other privileged user."""

    __tablename__ = 'bikeparking_edit'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    by = db.Column (db.String (64), nullable = False)
    timeOfApproval = db.Column (db.DateTime, default=datetime.datetime.utcnow)
    field = db.Column (db.String (24), nullable = False);
    edited = db.Column (db.Integer, db.ForeignKey ('bikeparking_approval.id'), nullable = False)



